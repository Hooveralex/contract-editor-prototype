tinymce.PluginManager.add('contractstandards', function(editor, url){
	function toggleOutline(){
		var $ = tinymce.dom.DomQuery;
		// get node with cursor
		var ed = tinymce.activeEditor
		var elem = ed.selection.getNode();

		if ($(elem).hasClass('numbered') || $(elem).parent().hasClass('numbered')) {
			removeOutline();
		} else {
			outline();
		}
	}

	function outline(){
		var $ = tinymce.dom.DomQuery;
		// get node with cursor
		var elem = tinymce.activeEditor.selection.getNode();
		if ($(elem).is('p')){
			$(elem).addClass('numbered');
		} else if ($(elem).is('b,strong') || $(elem).css('font-weight') == 'bold'){
			elem = elem.closest('p');
			$(elem).addClass('numbered');
		}  
	};

	function removeOutline(){
		var $ = tinymce.dom.DomQuery;
		// get node with cursor
		var elem = tinymce.activeEditor.selection.getNode();
		var closest = elem.closest('[class*="L"]');
		var closeClass = $(closest).attr("class").match("L[0-9]").toString();
		$(closest).removeClass('numbered');
	};

	function demote(){
		var $ = tinymce.dom.DomQuery;
		// capture closest L class
		var elem = tinymce.activeEditor.selection.getNode().closest('[class*="L"]');
		// pull out the number from that class (e.g., L2, L3, etc)
		var lvlClass = $(elem).attr("class");
		var lvl = lvlClass.match("L[0-9]{1,2}").toString().match("[0-9]{1,2}");
		console.log(lvl)
		// Go up one class number
		var nextLvl = parseInt(lvl) + 1;
		// Remove previous L class
		$(elem).removeClass("L" + parseInt(lvl));
		// Add new class number
		$(elem).addClass("L" + nextLvl);
	};

	function promote(){
		var $ = tinymce.dom.DomQuery;
		// capture closest L class
		var elem = tinymce.activeEditor.selection.getNode().closest('[class*="L"]');
		// pull out the number from that class (e.g., L2, L3, etc)
		var lvlClass = $(elem).attr("class");
		var lvl = lvlClass.match("L[0-9]{1,2}").toString().match("[0-9]{1,2}");
		// Since we are promoting here, we need to check if we are at L1. 
		// If we are, we do not want to go back to L0, so the function just returns 1. 
		// Otherwise, it returns the current L# - 1
		var nextLvl = function(){
			var i = parseInt(lvl);
			if (i > 1){
				return i - 1;
			} else {
				return 1
			};
		};
		// Swap out old L class with new one
		$(elem).removeClass("L" + parseInt(lvl)).addClass("L" + nextLvl());
	};

	// This function addresses a quirk in the benchmark html. The first p element in a div block does not usually have an L class.
	// As a result, applying outline numbering and promoting/demoting can be awkward.
	// This code adds the parent's L class in, smoothing out the issues created by the previously missing L class
	function noClassP(){
		$('.clause p, .clause-editor p').not('[class*="L"]').addClass('L1');
	};

	// If a standard or alternative clause textarea is empty, this function prepopulates to area with the p.L1 elements. You can just start writing without having to worry about default CS html formatting
	editor.on('LoadContent', function(e) {
		noClassP();
	});

	// If the key is a tab (keyCode = 9), the function preventsDefault so the cursor will stay in the textarea.
	// This allows the user to promote/demote clauses with shift+tab and tab respectively.
	editor.on('keydown', function(e) {
		if(e.keyCode == 9){
			e.preventDefault();
		};
	});

	// Enables promote and demote with shift + tab and tab. Keeps and updates L and pid classes.
	editor.on('keyup', function(e) {
		if(e.shiftKey && e.keyCode == 9){ // shift + tab
			promote();
		} else if (e.keyCode == 9){ // tab only
			demote();
		};
	}); 

	editor.addButton('outline', {
		tooltip: 'Add Outline',
		icon: 'outline',
		stateSelector: '.numbered',
		onclick: function() {
			toggleOutline();
		}
	});

	editor.addButton('demote', {
		tooltip: 'Demote Clause (Tab)',
		icon: 'indent',
		onclick: function() {
			demote();
		}
	});

	editor.addButton('promote', {
		tooltip: 'Promote Clause (Shift + Tab)',
		icon: 'outdent',
		onclick: function() {
			promote();
		}
	});

	editor.addButton('popup', {
		tooltip: 'Edit in a pop-up window',
		icon: 'popup'
	});

	editor.addButton('makeClause', {
			tooltip: 'Turn Selected Text into Clause Article',
			icon: 'magic'
		});
});